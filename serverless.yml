service: kleros-microservices
provider:
  name: aws
  runtime: nodejs10.x
  stage: '${opt:stage, self:custom.defaultStage}'
  region: us-east-2
package:
  exclude:
    - .env
environment:
  AWS_REGION: '${self:provider.region}'
plugins:
  - serverless-kms-secrets
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
custom:
  defaultStage: staging
  environments:
    staging: STAGING
    production: PRODUCTION
  serverless-kms-secrets:
    secretsFile: 'kms-secrets.${self:provider.region}.yml'
  kmsSecrets: '${file(kms-secrets.${self:provider.region}.yml)}'
  documentation:
    info:
      version: '1'
      title: 'Kleros Microservices'
      description: 'Collection of Kleros microservices.'
    resources:
      - {
          path: doges-on-trial,
          description: 'Microservices for the Doges on Trial dapp.',
        }
    models:
      - {
          name: ErrorResponse,
          description: 'An error response.',
          contentType: application/json,
          schema: '${file(src/models/error.json)}',
        }
      - {
          name: PostCFSRequest,
          description: 'The request for postCFS.',
          contentType: application/json,
          schema: '${file(src/global/models/cfs.json):post.request}',
        }
      - {
          name: PostCFSResponse,
          description: 'The response for postCFS.',
          contentType: application/json,
          schema: '${file(src/global/models/cfs.json):post.response}',
        }
      - {
          name: GetUserSettingsRequest,
          description: 'The request for getUserSettings.',
          contentType: application/json,
          schema: '${file(src/global/models/user-settings.json):get.request}',
        }
      - {
          name: GetUserSettingsResponse,
          description: 'The response for getUserSettings.',
          contentType: application/json,
          schema: '${file(src/global/models/user-settings.json):get.response}',
        }
      - {
          name: PatchUserSettingsRequest,
          description: 'The request for patchUserSettings.',
          contentType: application/json,
          schema: '${file(src/global/models/user-settings.json):patch.request}',
        }
      - {
          name: PatchUserSettingsResponse,
          description: 'The response for patchUserSettings.',
          contentType: application/json,
          schema: '${file(src/global/models/user-settings.json):patch.response}',
        }
      - {
          name: PostDogesOnTrialDogeImagesRequest,
          description: 'The request for postDogesOnTrialDogeImages.',
          contentType: application/json,
          schema: '${file(src/doges-on-trial/models/doge-images.json):post.request}',
        }
      - {
          name: PostDogesOnTrialDogeImagesResponse,
          description: 'The response for postDogesOnTrialDogeImages.',
          contentType: application/json,
          schema: '${file(src/doges-on-trial/models/doge-images.json):post.response}',
        }
      - {
          name: GetJustificationsRequest,
          description: 'The request for getJustifications.',
          contentType: application/json,
          schema: '${file(src/court/models/justifications.json):get.request}',
        }
      - {
          name: GetJustificationsResponse,
          description: 'The response for getJustifications.',
          contentType: application/json,
          schema: '${file(src/court/models/justifications.json):get.response}',
        }
      - {
          name: PutJustificationsRequest,
          description: 'The request for putJustifications.',
          contentType: application/json,
          schema: '${file(src/court/models/justifications.json):put.request}',
        }
      - {
          name: PutJustificationsResponse,
          description: 'The response for putJustifications.',
          contentType: application/json,
          schema: '${file(src/court/models/justifications.json):put.response}',
        }
functions:
  postCFS:
    handler: src/global/cfs.post
    events:
      - { http: { path: cfs, method: post, cors: true } }
    environment:
      CFS_S3_BUCKET: '${self:provider.stage}-cfs'
    iamRoleStatementsName: 'postCFS-${self:provider.stage}-lambda-role'
    iamRoleStatements:
      - {
          Effect: Allow,
          Action: ['s3:PutObject', 's3:PutObjectAcl'],
          Resource: 'arn:aws:s3:::${self:provider.stage}-cfs/*',
        }
    documentation:
      summary: 'Upload a file to CFS.'
      description: 'Supply the file name and the base64 encoded data.'
      requestModels: { application/json: PostCFSRequest }
      methodResponses:
        [
          {
            statusCode: '200',
            responseModels: { application/json: PostCFSResponse },
          },
          {
            statusCode: '400',
            responseModels: { application/json: ErrorResponse },
          },
        ]
  getUserSettings:
    handler: src/global/user-settings.get
    events:
      - { http: { path: user-settings, method: post, cors: true } }
    environment:
      INFURA_URL: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_INFURA_URL}'
    iamRoleStatementsName: 'getUserSettings-${self:provider.stage}-lambda-role'
    iamRoleStatements:
      - {
          Effect: Allow,
          Action: ['KMS:Decrypt'],
          Resource: '${self:custom.kmsSecrets.keyArn}',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:GetItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/user-settings',
        }
    documentation:
      summary: 'Get user settings.'
      description: 'Get user settings for an Ethereum address.'
      requestModels: { application/json: GetUserSettingsRequest }
      methodResponses:
        [
          {
            statusCode: '200',
            responseModels: { application/json: GetUserSettingsResponse },
          },
          {
            statusCode: '400',
            responseModels: { application/json: ErrorResponse },
          },
        ]
  patchUserSettings:
    handler: src/global/user-settings.patch
    events:
      - { http: { path: user-settings, method: patch, cors: true } }
    environment:
      INFURA_URL: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_INFURA_URL}'
    iamRoleStatementsName: 'patchUserSettings-${self:provider.stage}-lambda-role'
    iamRoleStatements:
      - {
          Effect: Allow,
          Action: ['KMS:Decrypt'],
          Resource: '${self:custom.kmsSecrets.keyArn}',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:GetItem', 'dynamodb:UpdateItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/user-settings',
        }
    documentation:
      summary: 'Update user settings.'
      description: 'Update user settings for an Ethereum address.'
      requestModels: { application/json: PatchUserSettingsRequest }
      methodResponses:
        [
          {
            statusCode: '200',
            responseModels: { application/json: PatchUserSettingsResponse },
          },
          {
            statusCode: '400',
            responseModels: { application/json: ErrorResponse },
          },
        ]
  postDogesOnTrialDogeImages:
    handler: src/doges-on-trial/doge-images.post
    events:
      - { http: { path: doges-on-trial/doge-images, method: post, cors: true } }
    environment:
      INFURA_URL: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_INFURA_URL}'
      ARBITRABLE_PERMISSION_LIST_ADDRESS: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_ARBITRABLE_PERMISSION_LIST_ADDRESS}'
      ARBITRABLE_PERMISSION_LIST_BLOCK_BLOCK_NUMBER: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_ARBITRABLE_PERMISSION_LIST_BLOCK_BLOCK_NUMBER}'
      DOGES_ON_TRIAL_DOGE_IMAGES_S3_BUCKET: '${self:provider.stage}-doges-on-trial-doge-images'
    iamRoleStatementsName: 'postDogesOnTrialDogeImages-${self:provider.stage}-lambda-role'
    iamRoleStatements:
      - {
          Effect: Allow,
          Action: ['KMS:Decrypt'],
          Resource: '${self:custom.kmsSecrets.keyArn}',
        }
      - {
          Effect: Allow,
          Action: ['s3:PutObject', 's3:PutObjectAcl'],
          Resource: 'arn:aws:s3:::${self:provider.stage}-doges-on-trial-doge-images/*',
        }
    documentation:
      summary: 'Upload a doge image.'
      description: 'The image hash must be added to the contract first.'
      requestModels: { application/json: PostDogesOnTrialDogeImagesRequest }
      methodResponses:
        [
          {
            statusCode: '200',
            responseModels:
              { application/json: PostDogesOnTrialDogeImagesResponse },
          },
          {
            statusCode: '400',
            responseModels: { application/json: ErrorResponse },
          },
        ]
  getJustifications:
    handler: src/court/justifications.get
    events:
      - { http: { path: justifications, method: post, cors: true } }
    iamRoleStatementsName: 'getJustifications-${self:provider.stage}-lambda-role'
    iamRoleStatements:
      - {
          Effect: Allow,
          Action: ['dynamodb:Query'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/kovan-justifications',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:Query'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/mainnet-justifications',
        }
    documentation:
      summary: 'Get justifications for a dispute round.'
      description: 'Get justifications for a dispute round.'
      requestModels: { application/json: GetJustificationsRequest }
      methodResponses:
        [
          {
            statusCode: '200',
            responseModels: { application/json: GetJustificationsResponse },
          },
          {
            statusCode: '400',
            responseModels: { application/json: ErrorResponse },
          },
        ]
  putJustifications:
    handler: src/court/justifications.put
    events:
      - { http: { path: justifications, method: put, cors: true } }
    environment:
      INFURA_URL_KOVAN: '${self:custom.kmsSecrets.secrets.STAGING_INFURA_URL}'
      INFURA_URL_MAINNET: '${self:custom.kmsSecrets.secrets.PRODUCTION_INFURA_URL}'
      KLEROS_LIQUID_ADDRESS_KOVAN: '${self:custom.kmsSecrets.secrets.STAGING_KLEROS_LIQUID_ADDRESS}'
      KLEROS_LIQUID_ADDRESS_MAINNET: '${self:custom.kmsSecrets.secrets.PRODUCTION_KLEROS_LIQUID_ADDRESS}'
    iamRoleStatementsName: 'putJustifications-${self:provider.stage}-lambda-role'
    iamRoleStatements:
      - {
          Effect: Allow,
          Action: ['KMS:Decrypt'],
          Resource: '${self:custom.kmsSecrets.keyArn}',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:GetItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/user-settings',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:PutItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/kovan-justifications',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:PutItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/mainnet-justifications',
        }
    documentation:
      summary: 'Put justification for a vote.'
      description: 'Put justification for a vote.'
      requestModels: { application/json: PutJustificationsRequest }
      methodResponses:
        [
          {
            statusCode: '200',
            responseModels: { application/json: PutJustificationsResponse },
          },
          {
            statusCode: '400',
            responseModels: { application/json: ErrorResponse },
          },
        ]
  putTokenSaleOrder:
    handler: src/token-sale/locales.put
    events:
      - { http: { path: token-sale, method: put, cors: true } }
    environment:
      INFURA_URL: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_INFURA_URL}'
      INFURA_URL_KOVAN: '${self:custom.kmsSecrets.secrets.STAGING_INFURA_URL}'
      INFURA_URL_MAINNET: '${self:custom.kmsSecrets.secrets.PRODUCTION_INFURA_URL}'
      TOKEN_SALE_CONTRACT_ADDRESS_KOVAN: '${self:custom.kmsSecrets.secrets.STAGING_TOKEN_SALE_CONTRACT_ADDRESS}'
      TOKEN_SALE_CONTRACT_ADDRESS: '${self:custom.kmsSecrets.secrets.PRODUCTION_TOKEN_SALE_CONTRACT_ADDRESS}'
    iamRoleStatementsName: 'putTokenSaleOrder-${self:provider.stage}-lambda-role'
    iamRoleStatements:
      - {
          Effect: Allow,
          Action: ['KMS:Decrypt'],
          Resource: '${self:custom.kmsSecrets.keyArn}',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:GetItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/token-sale-locales-kovan',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:GetItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/token-sale-locales',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:PutItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/token-sale-locales-kovan',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:PutItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/token-sale-locales',
        }
  getUnsubscribe:
    handler: src/global/unsubscribe.get
    events:
      - { http: { path: unsubscribe, method: get, cors: true } }
    environment:
      PRIVATE_KEY: '${self:custom.kmsSecrets.secrets.PRIVATE_KEY}'
    iamRoleStatementsName: 'getUnsubscribe-${self:provider.stage}-lambda-role'
    iamRoleStatements:
      - {
          Effect: Allow,
          Action: ['KMS:Decrypt'],
          Resource: '${self:custom.kmsSecrets.keyArn}',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:GetItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/user-settings',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:PutItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/user-settings',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:UpdateItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/user-settings',
        }
